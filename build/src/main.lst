                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Fri Jul 22 15:46:08 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _uart_write
                                     14 	.globl _UART_Config
                                     15 	.globl _GPIO_Config
                                     16 	.globl _assert_failed
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; Stack segment in internal ram 
                                     27 ;--------------------------------------------------------
                                     28 	.area	SSEG
      000000                         29 __start__stack:
      000000                         30 	.ds	1
                                     31 
                                     32 ;--------------------------------------------------------
                                     33 ; absolute external ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DABS (ABS)
                                     36 ;--------------------------------------------------------
                                     37 ; interrupt vector 
                                     38 ;--------------------------------------------------------
                                     39 	.area HOME
      000000                         40 __interrupt_vect:
      000000 82v00u00u00             41 	int s_GSINIT ;reset
      000004 82 00 00 00             42 	int 0x0000 ;trap
      000008 82 00 00 00             43 	int 0x0000 ;int0
      00000C 82 00 00 00             44 	int 0x0000 ;int1
      000010 82 00 00 00             45 	int 0x0000 ;int2
      000014 82 00 00 00             46 	int 0x0000 ;int3
      000018 82 00 00 00             47 	int 0x0000 ;int4
      00001C 82 00 00 00             48 	int 0x0000 ;int5
      000020 82 00 00 00             49 	int 0x0000 ;int6
      000024 82 00 00 00             50 	int 0x0000 ;int7
      000028 82 00 00 00             51 	int 0x0000 ;int8
      00002C 82 00 00 00             52 	int 0x0000 ;int9
      000030 82 00 00 00             53 	int 0x0000 ;int10
      000034 82 00 00 00             54 	int 0x0000 ;int11
      000038 82 00 00 00             55 	int 0x0000 ;int12
      00003C 82 00 00 00             56 	int 0x0000 ;int13
      000040 82 00 00 00             57 	int 0x0000 ;int14
      000044 82 00 00 00             58 	int 0x0000 ;int15
      000048 82 00 00 00             59 	int 0x0000 ;int16
      00004C 82 00 00 00             60 	int 0x0000 ;int17
      000050 82 00 00 00             61 	int 0x0000 ;int18
      000054 82 00 00 00             62 	int 0x0000 ;int19
      000058 82 00 00 00             63 	int 0x0000 ;int20
      00005C 82 00 00 00             64 	int 0x0000 ;int21
      000060 82 00 00 00             65 	int 0x0000 ;int22
      000064 82 00 00 00             66 	int 0x0000 ;int23
      000068 82 00 00 00             67 	int 0x0000 ;int24
      00006C 82 00 00 00             68 	int 0x0000 ;int25
      000070 82 00 00 00             69 	int 0x0000 ;int26
      000074 82 00 00 00             70 	int 0x0000 ;int27
      000078 82 00 00 00             71 	int 0x0000 ;int28
      00007C 82 00 00 00             72 	int 0x0000 ;int29
                                     73 ;--------------------------------------------------------
                                     74 ; global & static initialisations
                                     75 ;--------------------------------------------------------
                                     76 	.area HOME
                                     77 	.area GSINIT
                                     78 	.area GSFINAL
                                     79 	.area GSINIT
      000000                         80 __sdcc_gs_init_startup:
      000000                         81 __sdcc_init_data:
                                     82 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   83 	ldw x, #l_DATA
      000003 27 07            [ 1]   84 	jreq	00002$
      000005                         85 00001$:
      000005 72 4FuFFuFF      [ 1]   86 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   87 	decw x
      00000A 26 F9            [ 1]   88 	jrne	00001$
      00000C                         89 00002$:
      00000C AEr00r00         [ 2]   90 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   91 	jreq	00004$
      000011                         92 00003$:
      000011 D6uFFuFF         [ 1]   93 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   94 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   95 	decw	x
      000018 26 F7            [ 1]   96 	jrne	00003$
      00001A                         97 00004$:
                                     98 ; stm8_genXINIT() end
                                     99 	.area GSFINAL
      000000 CCr00r80         [ 2]  100 	jp	__sdcc_program_startup
                                    101 ;--------------------------------------------------------
                                    102 ; Home
                                    103 ;--------------------------------------------------------
                                    104 	.area HOME
                                    105 	.area HOME
      000080                        106 __sdcc_program_startup:
      000080 CCr00r00         [ 2]  107 	jp	_main
                                    108 ;	return from main will return to caller
                                    109 ;--------------------------------------------------------
                                    110 ; code
                                    111 ;--------------------------------------------------------
                                    112 	.area CODE
                                    113 ;	src/main.c: 6: void main(void)
                                    114 ;	-----------------------------------------
                                    115 ;	 function main
                                    116 ;	-----------------------------------------
      000000                        117 _main:
                                    118 ;	src/main.c: 9: UART_Config();
      000000 CDr00r00         [ 4]  119 	call	_UART_Config
                                    120 ;	src/main.c: 10: GPIO_Config ();
      000003 CDr00r00         [ 4]  121 	call	_GPIO_Config
                                    122 ;	src/main.c: 11: enableInterrupts();
      000006 9A               [ 1]  123 	rim
                                    124 ;	src/main.c: 12: while(1)
      000007                        125 00102$:
                                    126 ;	src/main.c: 15: uart_write('example uart1');  
      000007 4B 65            [ 1]  127 	push	#0x65
      000009 4B 00            [ 1]  128 	push	#0x00
      00000B CDr00r00         [ 4]  129 	call	_uart_write
      00000E 85               [ 2]  130 	popw	x
                                    131 ;	src/main.c: 16: uart_read();
      00000F CDr00r00         [ 4]  132 	call	_uart_read
      000012 20 F3            [ 2]  133 	jra	00102$
      000014 81               [ 4]  134 	ret
                                    135 ;	src/main.c: 21: void assert_failed(uint8_t* file, uint32_t line)
                                    136 ;	-----------------------------------------
                                    137 ;	 function assert_failed
                                    138 ;	-----------------------------------------
      000015                        139 _assert_failed:
                                    140 ;	src/main.c: 23: while (1)
      000015                        141 00102$:
      000015 20 FE            [ 2]  142 	jra	00102$
      000017 81               [ 4]  143 	ret
                                    144 	.area CODE
                                    145 	.area INITIALIZER
                                    146 	.area CABS (ABS)
